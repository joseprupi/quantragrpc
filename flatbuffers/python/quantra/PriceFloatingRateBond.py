# automatically generated by the FlatBuffers compiler, do not modify

# namespace: quantra

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class PriceFloatingRateBond(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PriceFloatingRateBond()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPriceFloatingRateBond(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # PriceFloatingRateBond
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PriceFloatingRateBond
    def FloatingRateBond(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from quantra.FloatingRateBond import FloatingRateBond
            obj = FloatingRateBond()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PriceFloatingRateBond
    def DiscountingCurve(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PriceFloatingRateBond
    def ForecastingCurve(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def Start(builder): builder.StartObject(3)
def PriceFloatingRateBondStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddFloatingRateBond(builder, floatingRateBond): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(floatingRateBond), 0)
def PriceFloatingRateBondAddFloatingRateBond(builder, floatingRateBond):
    """This method is deprecated. Please switch to AddFloatingRateBond."""
    return AddFloatingRateBond(builder, floatingRateBond)
def AddDiscountingCurve(builder, discountingCurve): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(discountingCurve), 0)
def PriceFloatingRateBondAddDiscountingCurve(builder, discountingCurve):
    """This method is deprecated. Please switch to AddDiscountingCurve."""
    return AddDiscountingCurve(builder, discountingCurve)
def AddForecastingCurve(builder, forecastingCurve): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(forecastingCurve), 0)
def PriceFloatingRateBondAddForecastingCurve(builder, forecastingCurve):
    """This method is deprecated. Please switch to AddForecastingCurve."""
    return AddForecastingCurve(builder, forecastingCurve)
def End(builder): return builder.EndObject()
def PriceFloatingRateBondEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)