# automatically generated by the FlatBuffers compiler, do not modify

# namespace: quantra

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Pricing(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Pricing()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPricing(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Pricing
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Pricing
    def AsOfDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Pricing
    def Curves(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from quantra.TermStructure import TermStructure
            obj = TermStructure()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Pricing
    def CurvesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Pricing
    def CurvesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # Pricing
    def BondPricingDetails(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Pricing
    def BondPricingFlows(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Pricing
    def YieldDayCounter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Pricing
    def YieldCompounding(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Pricing
    def YieldFrequency(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def Start(builder): builder.StartObject(7)
def PricingStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddAsOfDate(builder, asOfDate): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(asOfDate), 0)
def PricingAddAsOfDate(builder, asOfDate):
    """This method is deprecated. Please switch to AddAsOfDate."""
    return AddAsOfDate(builder, asOfDate)
def AddCurves(builder, curves): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(curves), 0)
def PricingAddCurves(builder, curves):
    """This method is deprecated. Please switch to AddCurves."""
    return AddCurves(builder, curves)
def StartCurvesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PricingStartCurvesVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartCurvesVector(builder, numElems)
def AddBondPricingDetails(builder, bondPricingDetails): builder.PrependBoolSlot(2, bondPricingDetails, 0)
def PricingAddBondPricingDetails(builder, bondPricingDetails):
    """This method is deprecated. Please switch to AddBondPricingDetails."""
    return AddBondPricingDetails(builder, bondPricingDetails)
def AddBondPricingFlows(builder, bondPricingFlows): builder.PrependBoolSlot(3, bondPricingFlows, 0)
def PricingAddBondPricingFlows(builder, bondPricingFlows):
    """This method is deprecated. Please switch to AddBondPricingFlows."""
    return AddBondPricingFlows(builder, bondPricingFlows)
def AddYieldDayCounter(builder, yieldDayCounter): builder.PrependInt8Slot(4, yieldDayCounter, 0)
def PricingAddYieldDayCounter(builder, yieldDayCounter):
    """This method is deprecated. Please switch to AddYieldDayCounter."""
    return AddYieldDayCounter(builder, yieldDayCounter)
def AddYieldCompounding(builder, yieldCompounding): builder.PrependInt8Slot(5, yieldCompounding, 0)
def PricingAddYieldCompounding(builder, yieldCompounding):
    """This method is deprecated. Please switch to AddYieldCompounding."""
    return AddYieldCompounding(builder, yieldCompounding)
def AddYieldFrequency(builder, yieldFrequency): builder.PrependInt8Slot(6, yieldFrequency, 0)
def PricingAddYieldFrequency(builder, yieldFrequency):
    """This method is deprecated. Please switch to AddYieldFrequency."""
    return AddYieldFrequency(builder, yieldFrequency)
def End(builder): return builder.EndObject()
def PricingEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)