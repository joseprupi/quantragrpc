// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { PriceFloatingRateBond } from '../quantra/price-floating-rate-bond';
import { Pricing } from '../quantra/pricing';


export class PriceFloatingRateBondRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):PriceFloatingRateBondRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPriceFloatingRateBondRequest(bb:flatbuffers.ByteBuffer, obj?:PriceFloatingRateBondRequest):PriceFloatingRateBondRequest {
  return (obj || new PriceFloatingRateBondRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPriceFloatingRateBondRequest(bb:flatbuffers.ByteBuffer, obj?:PriceFloatingRateBondRequest):PriceFloatingRateBondRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PriceFloatingRateBondRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

pricing(obj?:NS1003965332686405351.Pricing):NS1003965332686405351.Pricing|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new NS1003965332686405351.Pricing()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

bonds(index: number, obj?:PriceFloatingRateBond):PriceFloatingRateBond|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new PriceFloatingRateBond()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

bondsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startPriceFloatingRateBondRequest(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addPricing(builder:flatbuffers.Builder, pricingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, pricingOffset, 0);
}

static addBonds(builder:flatbuffers.Builder, bondsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, bondsOffset, 0);
}

static createBondsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startBondsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endPriceFloatingRateBondRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishPriceFloatingRateBondRequestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedPriceFloatingRateBondRequestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createPriceFloatingRateBondRequest(builder:flatbuffers.Builder, pricingOffset:flatbuffers.Offset, bondsOffset:flatbuffers.Offset):flatbuffers.Offset {
  PriceFloatingRateBondRequest.startPriceFloatingRateBondRequest(builder);
  PriceFloatingRateBondRequest.addPricing(builder, pricingOffset);
  PriceFloatingRateBondRequest.addBonds(builder, bondsOffset);
  return PriceFloatingRateBondRequest.endPriceFloatingRateBondRequest(builder);
}
}
