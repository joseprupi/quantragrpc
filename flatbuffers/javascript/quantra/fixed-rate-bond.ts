// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Schedule } from '../quantra/schedule';
import { BusinessDayConvention } from '../quantra/enums/business-day-convention';
import { DayCounter } from '../quantra/enums/day-counter';


export class FixedRateBond {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):FixedRateBond {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFixedRateBond(bb:flatbuffers.ByteBuffer, obj?:FixedRateBond):FixedRateBond {
  return (obj || new FixedRateBond()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFixedRateBond(bb:flatbuffers.ByteBuffer, obj?:FixedRateBond):FixedRateBond {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FixedRateBond()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

settlementDays():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

faceAmount():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

rate():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

accrualDayCounter():DayCounter {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : DayCounter.Actual360;
}

paymentConvention():BusinessDayConvention {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : BusinessDayConvention.Following;
}

redemption():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

issueDate():string|null
issueDate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
issueDate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

schedule(obj?:NS14293378783997770927.Schedule):NS14293378783997770927.Schedule|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? (obj || new NS14293378783997770927.Schedule()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startFixedRateBond(builder:flatbuffers.Builder) {
  builder.startObject(8);
}

static addSettlementDays(builder:flatbuffers.Builder, settlementDays:number) {
  builder.addFieldInt32(0, settlementDays, 0);
}

static addFaceAmount(builder:flatbuffers.Builder, faceAmount:number) {
  builder.addFieldFloat64(1, faceAmount, 0.0);
}

static addRate(builder:flatbuffers.Builder, rate:number) {
  builder.addFieldFloat64(2, rate, 0.0);
}

static addAccrualDayCounter(builder:flatbuffers.Builder, accrualDayCounter:DayCounter) {
  builder.addFieldInt8(3, accrualDayCounter, DayCounter.Actual360);
}

static addPaymentConvention(builder:flatbuffers.Builder, paymentConvention:BusinessDayConvention) {
  builder.addFieldInt8(4, paymentConvention, BusinessDayConvention.Following);
}

static addRedemption(builder:flatbuffers.Builder, redemption:number) {
  builder.addFieldFloat64(5, redemption, 0.0);
}

static addIssueDate(builder:flatbuffers.Builder, issueDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, issueDateOffset, 0);
}

static addSchedule(builder:flatbuffers.Builder, scheduleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, scheduleOffset, 0);
}

static endFixedRateBond(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishFixedRateBondBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedFixedRateBondBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

}
