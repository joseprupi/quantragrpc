// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class Fixing {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):Fixing {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFixing(bb:flatbuffers.ByteBuffer, obj?:Fixing):Fixing {
  return (obj || new Fixing()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFixing(bb:flatbuffers.ByteBuffer, obj?:Fixing):Fixing {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Fixing()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

date():string|null
date(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
date(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

rate():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startFixing(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addDate(builder:flatbuffers.Builder, dateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, dateOffset, 0);
}

static addRate(builder:flatbuffers.Builder, rate:number) {
  builder.addFieldFloat32(1, rate, 0.0);
}

static endFixing(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createFixing(builder:flatbuffers.Builder, dateOffset:flatbuffers.Offset, rate:number):flatbuffers.Offset {
  Fixing.startFixing(builder);
  Fixing.addDate(builder, dateOffset);
  Fixing.addRate(builder, rate);
  return Fixing.endFixing(builder);
}
}
