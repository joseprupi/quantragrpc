// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Compounding } from '../quantra/enums/compounding';
import { DayCounter } from '../quantra/enums/day-counter';
import { Frequency } from '../quantra/enums/frequency';


export class Yield {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):Yield {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsYield(bb:flatbuffers.ByteBuffer, obj?:Yield):Yield {
  return (obj || new Yield()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsYield(bb:flatbuffers.ByteBuffer, obj?:Yield):Yield {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Yield()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

dayCounter():DayCounter {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : DayCounter.Actual360;
}

compounding():Compounding {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Compounding.Compounded;
}

frequency():Frequency {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Frequency.Annual;
}

static startYield(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addDayCounter(builder:flatbuffers.Builder, dayCounter:DayCounter) {
  builder.addFieldInt8(0, dayCounter, DayCounter.Actual360);
}

static addCompounding(builder:flatbuffers.Builder, compounding:Compounding) {
  builder.addFieldInt8(1, compounding, Compounding.Compounded);
}

static addFrequency(builder:flatbuffers.Builder, frequency:Frequency) {
  builder.addFieldInt8(2, frequency, Frequency.Annual);
}

static endYield(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createYield(builder:flatbuffers.Builder, dayCounter:DayCounter, compounding:Compounding, frequency:Frequency):flatbuffers.Offset {
  Yield.startYield(builder);
  Yield.addDayCounter(builder, dayCounter);
  Yield.addCompounding(builder, compounding);
  Yield.addFrequency(builder, frequency);
  return Yield.endYield(builder);
}
}
