// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { FloatingRateBond } from '../quantra/floating-rate-bond';


export class PriceFloatingRateBond {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):PriceFloatingRateBond {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPriceFloatingRateBond(bb:flatbuffers.ByteBuffer, obj?:PriceFloatingRateBond):PriceFloatingRateBond {
  return (obj || new PriceFloatingRateBond()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPriceFloatingRateBond(bb:flatbuffers.ByteBuffer, obj?:PriceFloatingRateBond):PriceFloatingRateBond {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PriceFloatingRateBond()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

floatingRateBond(obj?:NS15301071718724409465.FloatingRateBond):NS15301071718724409465.FloatingRateBond|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new NS15301071718724409465.FloatingRateBond()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

discountingCurve():string|null
discountingCurve(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
discountingCurve(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

forecastingCurve():string|null
forecastingCurve(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
forecastingCurve(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startPriceFloatingRateBond(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addFloatingRateBond(builder:flatbuffers.Builder, floatingRateBondOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, floatingRateBondOffset, 0);
}

static addDiscountingCurve(builder:flatbuffers.Builder, discountingCurveOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, discountingCurveOffset, 0);
}

static addForecastingCurve(builder:flatbuffers.Builder, forecastingCurveOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, forecastingCurveOffset, 0);
}

static endPriceFloatingRateBond(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createPriceFloatingRateBond(builder:flatbuffers.Builder, floatingRateBondOffset:flatbuffers.Offset, discountingCurveOffset:flatbuffers.Offset, forecastingCurveOffset:flatbuffers.Offset):flatbuffers.Offset {
  PriceFloatingRateBond.startPriceFloatingRateBond(builder);
  PriceFloatingRateBond.addFloatingRateBond(builder, floatingRateBondOffset);
  PriceFloatingRateBond.addDiscountingCurve(builder, discountingCurveOffset);
  PriceFloatingRateBond.addForecastingCurve(builder, forecastingCurveOffset);
  return PriceFloatingRateBond.endPriceFloatingRateBond(builder);
}
}
