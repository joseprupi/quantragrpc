// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { PointsWrapper } from '../quantra/points-wrapper';
import { BootstrapTrait } from '../quantra/enums/bootstrap-trait';
import { DayCounter } from '../quantra/enums/day-counter';
import { Interpolator } from '../quantra/enums/interpolator';


export class TermStructure {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):TermStructure {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTermStructure(bb:flatbuffers.ByteBuffer, obj?:TermStructure):TermStructure {
  return (obj || new TermStructure()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTermStructure(bb:flatbuffers.ByteBuffer, obj?:TermStructure):TermStructure {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TermStructure()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

dayCounter():DayCounter {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : DayCounter.Actual360;
}

interpolator():Interpolator {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Interpolator.BackwardFlat;
}

bootstrapTrait():BootstrapTrait {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : BootstrapTrait.Discount;
}

points(index: number, obj?:PointsWrapper):PointsWrapper|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new PointsWrapper()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

pointsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

asOfDate():string|null
asOfDate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
asOfDate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startTermStructure(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addDayCounter(builder:flatbuffers.Builder, dayCounter:DayCounter) {
  builder.addFieldInt8(1, dayCounter, DayCounter.Actual360);
}

static addInterpolator(builder:flatbuffers.Builder, interpolator:Interpolator) {
  builder.addFieldInt8(2, interpolator, Interpolator.BackwardFlat);
}

static addBootstrapTrait(builder:flatbuffers.Builder, bootstrapTrait:BootstrapTrait) {
  builder.addFieldInt8(3, bootstrapTrait, BootstrapTrait.Discount);
}

static addPoints(builder:flatbuffers.Builder, pointsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, pointsOffset, 0);
}

static createPointsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPointsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addAsOfDate(builder:flatbuffers.Builder, asOfDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, asOfDateOffset, 0);
}

static endTermStructure(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishTermStructureBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedTermStructureBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createTermStructure(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, dayCounter:DayCounter, interpolator:Interpolator, bootstrapTrait:BootstrapTrait, pointsOffset:flatbuffers.Offset, asOfDateOffset:flatbuffers.Offset):flatbuffers.Offset {
  TermStructure.startTermStructure(builder);
  TermStructure.addId(builder, idOffset);
  TermStructure.addDayCounter(builder, dayCounter);
  TermStructure.addInterpolator(builder, interpolator);
  TermStructure.addBootstrapTrait(builder, bootstrapTrait);
  TermStructure.addPoints(builder, pointsOffset);
  TermStructure.addAsOfDate(builder, asOfDateOffset);
  return TermStructure.endTermStructure(builder);
}
}
