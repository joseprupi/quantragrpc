// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { BusinessDayConvention } from '../quantra/enums/business-day-convention';
import { Calendar } from '../quantra/enums/calendar';
import { DayCounter } from '../quantra/enums/day-counter';
import { Frequency } from '../quantra/enums/frequency';
import { Ibor } from '../quantra/enums/ibor';
import { TimeUnit } from '../quantra/enums/time-unit';


export class SwapHelper {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):SwapHelper {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSwapHelper(bb:flatbuffers.ByteBuffer, obj?:SwapHelper):SwapHelper {
  return (obj || new SwapHelper()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSwapHelper(bb:flatbuffers.ByteBuffer, obj?:SwapHelper):SwapHelper {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SwapHelper()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

rate():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

tenorTimeUnit():TimeUnit {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : TimeUnit.Days;
}

tenorNumber():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

calendar():Calendar {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Calendar.Argentina;
}

swFixedLegFrequency():Frequency {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Frequency.Annual;
}

swFixedLegConvention():BusinessDayConvention {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : BusinessDayConvention.Following;
}

swFixedLegDayCounter():DayCounter {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : DayCounter.Actual360;
}

swFloatingLegIndex():Ibor {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Ibor.Euribor10M;
}

spread():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

fwdStartDays():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startSwapHelper(builder:flatbuffers.Builder) {
  builder.startObject(10);
}

static addRate(builder:flatbuffers.Builder, rate:number) {
  builder.addFieldFloat32(0, rate, 0.0);
}

static addTenorTimeUnit(builder:flatbuffers.Builder, tenorTimeUnit:TimeUnit) {
  builder.addFieldInt8(1, tenorTimeUnit, TimeUnit.Days);
}

static addTenorNumber(builder:flatbuffers.Builder, tenorNumber:number) {
  builder.addFieldInt32(2, tenorNumber, 0);
}

static addCalendar(builder:flatbuffers.Builder, calendar:Calendar) {
  builder.addFieldInt8(3, calendar, Calendar.Argentina);
}

static addSwFixedLegFrequency(builder:flatbuffers.Builder, swFixedLegFrequency:Frequency) {
  builder.addFieldInt8(4, swFixedLegFrequency, Frequency.Annual);
}

static addSwFixedLegConvention(builder:flatbuffers.Builder, swFixedLegConvention:BusinessDayConvention) {
  builder.addFieldInt8(5, swFixedLegConvention, BusinessDayConvention.Following);
}

static addSwFixedLegDayCounter(builder:flatbuffers.Builder, swFixedLegDayCounter:DayCounter) {
  builder.addFieldInt8(6, swFixedLegDayCounter, DayCounter.Actual360);
}

static addSwFloatingLegIndex(builder:flatbuffers.Builder, swFloatingLegIndex:Ibor) {
  builder.addFieldInt8(7, swFloatingLegIndex, Ibor.Euribor10M);
}

static addSpread(builder:flatbuffers.Builder, spread:number) {
  builder.addFieldFloat32(8, spread, 0.0);
}

static addFwdStartDays(builder:flatbuffers.Builder, fwdStartDays:number) {
  builder.addFieldInt32(9, fwdStartDays, 0);
}

static endSwapHelper(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSwapHelper(builder:flatbuffers.Builder, rate:number, tenorTimeUnit:TimeUnit, tenorNumber:number, calendar:Calendar, swFixedLegFrequency:Frequency, swFixedLegConvention:BusinessDayConvention, swFixedLegDayCounter:DayCounter, swFloatingLegIndex:Ibor, spread:number, fwdStartDays:number):flatbuffers.Offset {
  SwapHelper.startSwapHelper(builder);
  SwapHelper.addRate(builder, rate);
  SwapHelper.addTenorTimeUnit(builder, tenorTimeUnit);
  SwapHelper.addTenorNumber(builder, tenorNumber);
  SwapHelper.addCalendar(builder, calendar);
  SwapHelper.addSwFixedLegFrequency(builder, swFixedLegFrequency);
  SwapHelper.addSwFixedLegConvention(builder, swFixedLegConvention);
  SwapHelper.addSwFixedLegDayCounter(builder, swFixedLegDayCounter);
  SwapHelper.addSwFloatingLegIndex(builder, swFloatingLegIndex);
  SwapHelper.addSpread(builder, spread);
  SwapHelper.addFwdStartDays(builder, fwdStartDays);
  return SwapHelper.endSwapHelper(builder);
}

serialize():Uint8Array {
  return this.bb!.bytes();
}

static deserialize(buffer: Uint8Array):SwapHelper {
  return SwapHelper.getRootAsSwapHelper(new flatbuffers.ByteBuffer(buffer))
}
}
