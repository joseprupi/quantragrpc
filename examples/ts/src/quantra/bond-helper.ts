// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Schedule } from '../quantra/schedule';
import { BusinessDayConvention } from '../quantra/enums/business-day-convention';
import { DayCounter } from '../quantra/enums/day-counter';


export class BondHelper {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):BondHelper {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsBondHelper(bb:flatbuffers.ByteBuffer, obj?:BondHelper):BondHelper {
  return (obj || new BondHelper()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsBondHelper(bb:flatbuffers.ByteBuffer, obj?:BondHelper):BondHelper {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new BondHelper()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

rate():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

settlementDays():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

faceAmount():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

schedule(obj?:Schedule):Schedule|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new Schedule()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

couponRate():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

dayCounter():DayCounter {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : DayCounter.Actual360;
}

businessDayConvention():BusinessDayConvention {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : BusinessDayConvention.Following;
}

redemption():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

issueDate():string|null
issueDate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
issueDate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startBondHelper(builder:flatbuffers.Builder) {
  builder.startObject(9);
}

static addRate(builder:flatbuffers.Builder, rate:number) {
  builder.addFieldFloat32(0, rate, 0.0);
}

static addSettlementDays(builder:flatbuffers.Builder, settlementDays:number) {
  builder.addFieldInt32(1, settlementDays, 0);
}

static addFaceAmount(builder:flatbuffers.Builder, faceAmount:number) {
  builder.addFieldFloat32(2, faceAmount, 0.0);
}

static addSchedule(builder:flatbuffers.Builder, scheduleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, scheduleOffset, 0);
}

static addCouponRate(builder:flatbuffers.Builder, couponRate:number) {
  builder.addFieldFloat32(4, couponRate, 0.0);
}

static addDayCounter(builder:flatbuffers.Builder, dayCounter:DayCounter) {
  builder.addFieldInt8(5, dayCounter, DayCounter.Actual360);
}

static addBusinessDayConvention(builder:flatbuffers.Builder, businessDayConvention:BusinessDayConvention) {
  builder.addFieldInt8(6, businessDayConvention, BusinessDayConvention.Following);
}

static addRedemption(builder:flatbuffers.Builder, redemption:number) {
  builder.addFieldFloat32(7, redemption, 0.0);
}

static addIssueDate(builder:flatbuffers.Builder, issueDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, issueDateOffset, 0);
}

static endBondHelper(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


serialize():Uint8Array {
  return this.bb!.bytes();
}

static deserialize(buffer: Uint8Array):BondHelper {
  return BondHelper.getRootAsBondHelper(new flatbuffers.ByteBuffer(buffer))
}
}
