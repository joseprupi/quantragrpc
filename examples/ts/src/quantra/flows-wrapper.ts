// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Flow, unionToFlow, unionListToFlow } from '../quantra/flow';


export class FlowsWrapper {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):FlowsWrapper {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFlowsWrapper(bb:flatbuffers.ByteBuffer, obj?:FlowsWrapper):FlowsWrapper {
  return (obj || new FlowsWrapper()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFlowsWrapper(bb:flatbuffers.ByteBuffer, obj?:FlowsWrapper):FlowsWrapper {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FlowsWrapper()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

flowWrapperType():Flow {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : Flow.NONE;
}

flowWrapper<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startFlowsWrapper(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addFlowWrapperType(builder:flatbuffers.Builder, flowWrapperType:Flow) {
  builder.addFieldInt8(0, flowWrapperType, Flow.NONE);
}

static addFlowWrapper(builder:flatbuffers.Builder, flowWrapperOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, flowWrapperOffset, 0);
}

static endFlowsWrapper(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createFlowsWrapper(builder:flatbuffers.Builder, flowWrapperType:Flow, flowWrapperOffset:flatbuffers.Offset):flatbuffers.Offset {
  FlowsWrapper.startFlowsWrapper(builder);
  FlowsWrapper.addFlowWrapperType(builder, flowWrapperType);
  FlowsWrapper.addFlowWrapper(builder, flowWrapperOffset);
  return FlowsWrapper.endFlowsWrapper(builder);
}

serialize():Uint8Array {
  return this.bb!.bytes();
}

static deserialize(buffer: Uint8Array):FlowsWrapper {
  return FlowsWrapper.getRootAsFlowsWrapper(new flatbuffers.ByteBuffer(buffer))
}
}
