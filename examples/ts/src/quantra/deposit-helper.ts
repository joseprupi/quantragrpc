// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { BusinessDayConvention } from '../quantra/enums/business-day-convention';
import { Calendar } from '../quantra/enums/calendar';
import { DayCounter } from '../quantra/enums/day-counter';
import { TimeUnit } from '../quantra/enums/time-unit';


export class DepositHelper {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):DepositHelper {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDepositHelper(bb:flatbuffers.ByteBuffer, obj?:DepositHelper):DepositHelper {
  return (obj || new DepositHelper()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDepositHelper(bb:flatbuffers.ByteBuffer, obj?:DepositHelper):DepositHelper {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DepositHelper()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

rate():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

tenorTimeUnit():TimeUnit {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : TimeUnit.Days;
}

tenorNumber():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

fixingDays():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

calendar():Calendar {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Calendar.Argentina;
}

businessDayConvention():BusinessDayConvention {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : BusinessDayConvention.Following;
}

dayCounter():DayCounter {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : DayCounter.Actual360;
}

static startDepositHelper(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addRate(builder:flatbuffers.Builder, rate:number) {
  builder.addFieldFloat32(0, rate, 0.0);
}

static addTenorTimeUnit(builder:flatbuffers.Builder, tenorTimeUnit:TimeUnit) {
  builder.addFieldInt8(1, tenorTimeUnit, TimeUnit.Days);
}

static addTenorNumber(builder:flatbuffers.Builder, tenorNumber:number) {
  builder.addFieldInt32(2, tenorNumber, 0);
}

static addFixingDays(builder:flatbuffers.Builder, fixingDays:number) {
  builder.addFieldInt32(3, fixingDays, 0);
}

static addCalendar(builder:flatbuffers.Builder, calendar:Calendar) {
  builder.addFieldInt8(4, calendar, Calendar.Argentina);
}

static addBusinessDayConvention(builder:flatbuffers.Builder, businessDayConvention:BusinessDayConvention) {
  builder.addFieldInt8(5, businessDayConvention, BusinessDayConvention.Following);
}

static addDayCounter(builder:flatbuffers.Builder, dayCounter:DayCounter) {
  builder.addFieldInt8(6, dayCounter, DayCounter.Actual360);
}

static endDepositHelper(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDepositHelper(builder:flatbuffers.Builder, rate:number, tenorTimeUnit:TimeUnit, tenorNumber:number, fixingDays:number, calendar:Calendar, businessDayConvention:BusinessDayConvention, dayCounter:DayCounter):flatbuffers.Offset {
  DepositHelper.startDepositHelper(builder);
  DepositHelper.addRate(builder, rate);
  DepositHelper.addTenorTimeUnit(builder, tenorTimeUnit);
  DepositHelper.addTenorNumber(builder, tenorNumber);
  DepositHelper.addFixingDays(builder, fixingDays);
  DepositHelper.addCalendar(builder, calendar);
  DepositHelper.addBusinessDayConvention(builder, businessDayConvention);
  DepositHelper.addDayCounter(builder, dayCounter);
  return DepositHelper.endDepositHelper(builder);
}

serialize():Uint8Array {
  return this.bb!.bytes();
}

static deserialize(buffer: Uint8Array):DepositHelper {
  return DepositHelper.getRootAsDepositHelper(new flatbuffers.ByteBuffer(buffer))
}
}
