// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { BusinessDayConvention } from '../quantra/enums/business-day-convention';
import { Calendar } from '../quantra/enums/calendar';
import { DateGenerationRule } from '../quantra/enums/date-generation-rule';
import { Frequency } from '../quantra/enums/frequency';


export class Schedule {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):Schedule {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSchedule(bb:flatbuffers.ByteBuffer, obj?:Schedule):Schedule {
  return (obj || new Schedule()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSchedule(bb:flatbuffers.ByteBuffer, obj?:Schedule):Schedule {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Schedule()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

calendar():Calendar {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Calendar.Argentina;
}

effectiveDate():string|null
effectiveDate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
effectiveDate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

terminationDate():string|null
terminationDate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
terminationDate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

frequency():Frequency {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Frequency.Annual;
}

convention():BusinessDayConvention {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : BusinessDayConvention.Following;
}

terminationDateConvention():BusinessDayConvention {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : BusinessDayConvention.Following;
}

dateGenerationRule():DateGenerationRule {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : DateGenerationRule.Backward;
}

endOfMont():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startSchedule(builder:flatbuffers.Builder) {
  builder.startObject(8);
}

static addCalendar(builder:flatbuffers.Builder, calendar:Calendar) {
  builder.addFieldInt8(0, calendar, Calendar.Argentina);
}

static addEffectiveDate(builder:flatbuffers.Builder, effectiveDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, effectiveDateOffset, 0);
}

static addTerminationDate(builder:flatbuffers.Builder, terminationDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, terminationDateOffset, 0);
}

static addFrequency(builder:flatbuffers.Builder, frequency:Frequency) {
  builder.addFieldInt8(3, frequency, Frequency.Annual);
}

static addConvention(builder:flatbuffers.Builder, convention:BusinessDayConvention) {
  builder.addFieldInt8(4, convention, BusinessDayConvention.Following);
}

static addTerminationDateConvention(builder:flatbuffers.Builder, terminationDateConvention:BusinessDayConvention) {
  builder.addFieldInt8(5, terminationDateConvention, BusinessDayConvention.Following);
}

static addDateGenerationRule(builder:flatbuffers.Builder, dateGenerationRule:DateGenerationRule) {
  builder.addFieldInt8(6, dateGenerationRule, DateGenerationRule.Backward);
}

static addEndOfMont(builder:flatbuffers.Builder, endOfMont:boolean) {
  builder.addFieldInt8(7, +endOfMont, +false);
}

static endSchedule(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSchedule(builder:flatbuffers.Builder, calendar:Calendar, effectiveDateOffset:flatbuffers.Offset, terminationDateOffset:flatbuffers.Offset, frequency:Frequency, convention:BusinessDayConvention, terminationDateConvention:BusinessDayConvention, dateGenerationRule:DateGenerationRule, endOfMont:boolean):flatbuffers.Offset {
  Schedule.startSchedule(builder);
  Schedule.addCalendar(builder, calendar);
  Schedule.addEffectiveDate(builder, effectiveDateOffset);
  Schedule.addTerminationDate(builder, terminationDateOffset);
  Schedule.addFrequency(builder, frequency);
  Schedule.addConvention(builder, convention);
  Schedule.addTerminationDateConvention(builder, terminationDateConvention);
  Schedule.addDateGenerationRule(builder, dateGenerationRule);
  Schedule.addEndOfMont(builder, endOfMont);
  return Schedule.endSchedule(builder);
}

serialize():Uint8Array {
  return this.bb!.bytes();
}

static deserialize(buffer: Uint8Array):Schedule {
  return Schedule.getRootAsSchedule(new flatbuffers.ByteBuffer(buffer))
}
}
