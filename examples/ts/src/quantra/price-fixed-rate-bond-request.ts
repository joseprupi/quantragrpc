// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { PriceFixedRateBond } from '../quantra/price-fixed-rate-bond';
import { Pricing } from '../quantra/pricing';


export class PriceFixedRateBondRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):PriceFixedRateBondRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPriceFixedRateBondRequest(bb:flatbuffers.ByteBuffer, obj?:PriceFixedRateBondRequest):PriceFixedRateBondRequest {
  return (obj || new PriceFixedRateBondRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPriceFixedRateBondRequest(bb:flatbuffers.ByteBuffer, obj?:PriceFixedRateBondRequest):PriceFixedRateBondRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PriceFixedRateBondRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

pricing(obj?:Pricing):Pricing|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Pricing()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

bonds(index: number, obj?:PriceFixedRateBond):PriceFixedRateBond|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new PriceFixedRateBond()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

bondsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startPriceFixedRateBondRequest(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addPricing(builder:flatbuffers.Builder, pricingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, pricingOffset, 0);
}

static addBonds(builder:flatbuffers.Builder, bondsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, bondsOffset, 0);
}

static createBondsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startBondsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endPriceFixedRateBondRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createPriceFixedRateBondRequest(builder:flatbuffers.Builder, pricingOffset:flatbuffers.Offset, bondsOffset:flatbuffers.Offset):flatbuffers.Offset {
  PriceFixedRateBondRequest.startPriceFixedRateBondRequest(builder);
  PriceFixedRateBondRequest.addPricing(builder, pricingOffset);
  PriceFixedRateBondRequest.addBonds(builder, bondsOffset);
  return PriceFixedRateBondRequest.endPriceFixedRateBondRequest(builder);
}

serialize():Uint8Array {
  return this.bb!.bytes();
}

static deserialize(buffer: Uint8Array):PriceFixedRateBondRequest {
  return PriceFixedRateBondRequest.getRootAsPriceFixedRateBondRequest(new flatbuffers.ByteBuffer(buffer))
}
}
