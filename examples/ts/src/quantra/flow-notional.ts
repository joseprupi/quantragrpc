// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class FlowNotional {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):FlowNotional {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFlowNotional(bb:flatbuffers.ByteBuffer, obj?:FlowNotional):FlowNotional {
  return (obj || new FlowNotional()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFlowNotional(bb:flatbuffers.ByteBuffer, obj?:FlowNotional):FlowNotional {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FlowNotional()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

date():string|null
date(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
date(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

amount():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

discount():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

price():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startFlowNotional(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addDate(builder:flatbuffers.Builder, dateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, dateOffset, 0);
}

static addAmount(builder:flatbuffers.Builder, amount:number) {
  builder.addFieldFloat64(1, amount, 0.0);
}

static addDiscount(builder:flatbuffers.Builder, discount:number) {
  builder.addFieldFloat32(2, discount, 0.0);
}

static addPrice(builder:flatbuffers.Builder, price:number) {
  builder.addFieldFloat32(3, price, 0.0);
}

static endFlowNotional(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createFlowNotional(builder:flatbuffers.Builder, dateOffset:flatbuffers.Offset, amount:number, discount:number, price:number):flatbuffers.Offset {
  FlowNotional.startFlowNotional(builder);
  FlowNotional.addDate(builder, dateOffset);
  FlowNotional.addAmount(builder, amount);
  FlowNotional.addDiscount(builder, discount);
  FlowNotional.addPrice(builder, price);
  return FlowNotional.endFlowNotional(builder);
}

serialize():Uint8Array {
  return this.bb!.bytes();
}

static deserialize(buffer: Uint8Array):FlowNotional {
  return FlowNotional.getRootAsFlowNotional(new flatbuffers.ByteBuffer(buffer))
}
}
