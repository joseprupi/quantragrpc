"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Index = void 0;
var flatbuffers = __importStar(require("flatbuffers"));
var fixing_1 = require("../quantra/fixing");
var business_day_convention_1 = require("../quantra/enums/business-day-convention");
var calendar_1 = require("../quantra/enums/calendar");
var day_counter_1 = require("../quantra/enums/day-counter");
var time_unit_1 = require("../quantra/enums/time-unit");
var Index = /** @class */ (function () {
    function Index() {
        this.bb = null;
        this.bb_pos = 0;
    }
    Index.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    Index.getRootAsIndex = function (bb, obj) {
        return (obj || new Index()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Index.getSizePrefixedRootAsIndex = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Index()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Index.prototype.periodNumber = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    Index.prototype.periodTimeUnit = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : time_unit_1.TimeUnit.Days;
    };
    Index.prototype.settlementDays = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    Index.prototype.calendar = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : calendar_1.Calendar.Argentina;
    };
    Index.prototype.businessDayConvention = function () {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : business_day_convention_1.BusinessDayConvention.Following;
    };
    Index.prototype.endOfMonth = function () {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    };
    Index.prototype.dayCounter = function () {
        var offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : day_counter_1.DayCounter.Actual360;
    };
    Index.prototype.fixings = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? (obj || new fixing_1.Fixing()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    Index.prototype.fixingsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Index.startIndex = function (builder) {
        builder.startObject(8);
    };
    Index.addPeriodNumber = function (builder, periodNumber) {
        builder.addFieldInt32(0, periodNumber, 0);
    };
    Index.addPeriodTimeUnit = function (builder, periodTimeUnit) {
        builder.addFieldInt8(1, periodTimeUnit, time_unit_1.TimeUnit.Days);
    };
    Index.addSettlementDays = function (builder, settlementDays) {
        builder.addFieldInt32(2, settlementDays, 0);
    };
    Index.addCalendar = function (builder, calendar) {
        builder.addFieldInt8(3, calendar, calendar_1.Calendar.Argentina);
    };
    Index.addBusinessDayConvention = function (builder, businessDayConvention) {
        builder.addFieldInt8(4, businessDayConvention, business_day_convention_1.BusinessDayConvention.Following);
    };
    Index.addEndOfMonth = function (builder, endOfMonth) {
        builder.addFieldInt8(5, +endOfMonth, +false);
    };
    Index.addDayCounter = function (builder, dayCounter) {
        builder.addFieldInt8(6, dayCounter, day_counter_1.DayCounter.Actual360);
    };
    Index.addFixings = function (builder, fixingsOffset) {
        builder.addFieldOffset(7, fixingsOffset, 0);
    };
    Index.createFixingsVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    Index.startFixingsVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    Index.endIndex = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    Index.createIndex = function (builder, periodNumber, periodTimeUnit, settlementDays, calendar, businessDayConvention, endOfMonth, dayCounter, fixingsOffset) {
        Index.startIndex(builder);
        Index.addPeriodNumber(builder, periodNumber);
        Index.addPeriodTimeUnit(builder, periodTimeUnit);
        Index.addSettlementDays(builder, settlementDays);
        Index.addCalendar(builder, calendar);
        Index.addBusinessDayConvention(builder, businessDayConvention);
        Index.addEndOfMonth(builder, endOfMonth);
        Index.addDayCounter(builder, dayCounter);
        Index.addFixings(builder, fixingsOffset);
        return Index.endIndex(builder);
    };
    Index.prototype.serialize = function () {
        return this.bb.bytes();
    };
    Index.deserialize = function (buffer) {
        return Index.getRootAsIndex(new flatbuffers.ByteBuffer(buffer));
    };
    return Index;
}());
exports.Index = Index;
//# sourceMappingURL=index.js.map