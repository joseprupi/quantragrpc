"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Pricing = void 0;
var flatbuffers = __importStar(require("flatbuffers"));
var term_structure_1 = require("../quantra/term-structure");
var compounding_1 = require("../quantra/enums/compounding");
var day_counter_1 = require("../quantra/enums/day-counter");
var frequency_1 = require("../quantra/enums/frequency");
var Pricing = /** @class */ (function () {
    function Pricing() {
        this.bb = null;
        this.bb_pos = 0;
    }
    Pricing.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    Pricing.getRootAsPricing = function (bb, obj) {
        return (obj || new Pricing()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Pricing.getSizePrefixedRootAsPricing = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Pricing()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Pricing.prototype.asOfDate = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    Pricing.prototype.curves = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? (obj || new term_structure_1.TermStructure()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    Pricing.prototype.curvesLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Pricing.prototype.bondPricingDetails = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    };
    Pricing.prototype.bondPricingFlows = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    };
    Pricing.prototype.yieldDayCounter = function () {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : day_counter_1.DayCounter.Actual360;
    };
    Pricing.prototype.yieldCompounding = function () {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : compounding_1.Compounding.Compounded;
    };
    Pricing.prototype.yieldFrequency = function () {
        var offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : frequency_1.Frequency.Annual;
    };
    Pricing.startPricing = function (builder) {
        builder.startObject(7);
    };
    Pricing.addAsOfDate = function (builder, asOfDateOffset) {
        builder.addFieldOffset(0, asOfDateOffset, 0);
    };
    Pricing.addCurves = function (builder, curvesOffset) {
        builder.addFieldOffset(1, curvesOffset, 0);
    };
    Pricing.createCurvesVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    Pricing.startCurvesVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    Pricing.addBondPricingDetails = function (builder, bondPricingDetails) {
        builder.addFieldInt8(2, +bondPricingDetails, +false);
    };
    Pricing.addBondPricingFlows = function (builder, bondPricingFlows) {
        builder.addFieldInt8(3, +bondPricingFlows, +false);
    };
    Pricing.addYieldDayCounter = function (builder, yieldDayCounter) {
        builder.addFieldInt8(4, yieldDayCounter, day_counter_1.DayCounter.Actual360);
    };
    Pricing.addYieldCompounding = function (builder, yieldCompounding) {
        builder.addFieldInt8(5, yieldCompounding, compounding_1.Compounding.Compounded);
    };
    Pricing.addYieldFrequency = function (builder, yieldFrequency) {
        builder.addFieldInt8(6, yieldFrequency, frequency_1.Frequency.Annual);
    };
    Pricing.endPricing = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    Pricing.createPricing = function (builder, asOfDateOffset, curvesOffset, bondPricingDetails, bondPricingFlows, yieldDayCounter, yieldCompounding, yieldFrequency) {
        Pricing.startPricing(builder);
        Pricing.addAsOfDate(builder, asOfDateOffset);
        Pricing.addCurves(builder, curvesOffset);
        Pricing.addBondPricingDetails(builder, bondPricingDetails);
        Pricing.addBondPricingFlows(builder, bondPricingFlows);
        Pricing.addYieldDayCounter(builder, yieldDayCounter);
        Pricing.addYieldCompounding(builder, yieldCompounding);
        Pricing.addYieldFrequency(builder, yieldFrequency);
        return Pricing.endPricing(builder);
    };
    Pricing.prototype.serialize = function () {
        return this.bb.bytes();
    };
    Pricing.deserialize = function (buffer) {
        return Pricing.getRootAsPricing(new flatbuffers.ByteBuffer(buffer));
    };
    return Pricing;
}());
exports.Pricing = Pricing;
//# sourceMappingURL=pricing.js.map