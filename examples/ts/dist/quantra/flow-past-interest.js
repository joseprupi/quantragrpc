"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FlowPastInterest = void 0;
var flatbuffers = __importStar(require("flatbuffers"));
var FlowPastInterest = /** @class */ (function () {
    function FlowPastInterest() {
        this.bb = null;
        this.bb_pos = 0;
    }
    FlowPastInterest.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    FlowPastInterest.getRootAsFlowPastInterest = function (bb, obj) {
        return (obj || new FlowPastInterest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    FlowPastInterest.getSizePrefixedRootAsFlowPastInterest = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new FlowPastInterest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    FlowPastInterest.prototype.amount = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    };
    FlowPastInterest.prototype.accrualStartDate = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    FlowPastInterest.prototype.accrualEndDate = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    FlowPastInterest.prototype.rate = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    };
    FlowPastInterest.startFlowPastInterest = function (builder) {
        builder.startObject(4);
    };
    FlowPastInterest.addAmount = function (builder, amount) {
        builder.addFieldFloat64(0, amount, 0.0);
    };
    FlowPastInterest.addAccrualStartDate = function (builder, accrualStartDateOffset) {
        builder.addFieldOffset(1, accrualStartDateOffset, 0);
    };
    FlowPastInterest.addAccrualEndDate = function (builder, accrualEndDateOffset) {
        builder.addFieldOffset(2, accrualEndDateOffset, 0);
    };
    FlowPastInterest.addRate = function (builder, rate) {
        builder.addFieldFloat32(3, rate, 0.0);
    };
    FlowPastInterest.endFlowPastInterest = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    FlowPastInterest.createFlowPastInterest = function (builder, amount, accrualStartDateOffset, accrualEndDateOffset, rate) {
        FlowPastInterest.startFlowPastInterest(builder);
        FlowPastInterest.addAmount(builder, amount);
        FlowPastInterest.addAccrualStartDate(builder, accrualStartDateOffset);
        FlowPastInterest.addAccrualEndDate(builder, accrualEndDateOffset);
        FlowPastInterest.addRate(builder, rate);
        return FlowPastInterest.endFlowPastInterest(builder);
    };
    FlowPastInterest.prototype.serialize = function () {
        return this.bb.bytes();
    };
    FlowPastInterest.deserialize = function (buffer) {
        return FlowPastInterest.getRootAsFlowPastInterest(new flatbuffers.ByteBuffer(buffer));
    };
    return FlowPastInterest;
}());
exports.FlowPastInterest = FlowPastInterest;
//# sourceMappingURL=flow-past-interest.js.map