"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FutureHelper = void 0;
var flatbuffers = __importStar(require("flatbuffers"));
var business_day_convention_1 = require("../quantra/enums/business-day-convention");
var calendar_1 = require("../quantra/enums/calendar");
var day_counter_1 = require("../quantra/enums/day-counter");
var FutureHelper = /** @class */ (function () {
    function FutureHelper() {
        this.bb = null;
        this.bb_pos = 0;
    }
    FutureHelper.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    FutureHelper.getRootAsFutureHelper = function (bb, obj) {
        return (obj || new FutureHelper()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    FutureHelper.getSizePrefixedRootAsFutureHelper = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new FutureHelper()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    FutureHelper.prototype.rate = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    };
    FutureHelper.prototype.futureStartDate = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    FutureHelper.prototype.futureMonths = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    FutureHelper.prototype.calendar = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : calendar_1.Calendar.Argentina;
    };
    FutureHelper.prototype.businessDayConvention = function () {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : business_day_convention_1.BusinessDayConvention.Following;
    };
    FutureHelper.prototype.dayCounter = function () {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : day_counter_1.DayCounter.Actual360;
    };
    FutureHelper.startFutureHelper = function (builder) {
        builder.startObject(6);
    };
    FutureHelper.addRate = function (builder, rate) {
        builder.addFieldFloat32(0, rate, 0.0);
    };
    FutureHelper.addFutureStartDate = function (builder, futureStartDateOffset) {
        builder.addFieldOffset(1, futureStartDateOffset, 0);
    };
    FutureHelper.addFutureMonths = function (builder, futureMonths) {
        builder.addFieldInt32(2, futureMonths, 0);
    };
    FutureHelper.addCalendar = function (builder, calendar) {
        builder.addFieldInt8(3, calendar, calendar_1.Calendar.Argentina);
    };
    FutureHelper.addBusinessDayConvention = function (builder, businessDayConvention) {
        builder.addFieldInt8(4, businessDayConvention, business_day_convention_1.BusinessDayConvention.Following);
    };
    FutureHelper.addDayCounter = function (builder, dayCounter) {
        builder.addFieldInt8(5, dayCounter, day_counter_1.DayCounter.Actual360);
    };
    FutureHelper.endFutureHelper = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    FutureHelper.createFutureHelper = function (builder, rate, futureStartDateOffset, futureMonths, calendar, businessDayConvention, dayCounter) {
        FutureHelper.startFutureHelper(builder);
        FutureHelper.addRate(builder, rate);
        FutureHelper.addFutureStartDate(builder, futureStartDateOffset);
        FutureHelper.addFutureMonths(builder, futureMonths);
        FutureHelper.addCalendar(builder, calendar);
        FutureHelper.addBusinessDayConvention(builder, businessDayConvention);
        FutureHelper.addDayCounter(builder, dayCounter);
        return FutureHelper.endFutureHelper(builder);
    };
    return FutureHelper;
}());
exports.FutureHelper = FutureHelper;
//# sourceMappingURL=future-helper.js.map