// automatically generated by the FlatBuffers compiler, do not modify

import { BondHelper } from '../quantra/bond-helper';
import { DepositHelper } from '../quantra/deposit-helper';
import { FRAHelper } from '../quantra/f-r-a-helper';
import { FutureHelper } from '../quantra/future-helper';
import { SwapHelper } from '../quantra/swap-helper';


export enum Point{
  NONE = 0,
  DepositHelper = 1,
  FRAHelper = 2,
  FutureHelper = 3,
  SwapHelper = 4,
  BondHelper = 5
}

export function unionToPoint(
  type: Point,
  accessor: (obj:BondHelper|DepositHelper|FRAHelper|FutureHelper|SwapHelper) => BondHelper|DepositHelper|FRAHelper|FutureHelper|SwapHelper|null
): BondHelper|DepositHelper|FRAHelper|FutureHelper|SwapHelper|null {
  switch(Point[type]) {
    case 'NONE': return null; 
    case 'DepositHelper': return accessor(new DepositHelper())! as DepositHelper;
    case 'FRAHelper': return accessor(new FRAHelper())! as FRAHelper;
    case 'FutureHelper': return accessor(new FutureHelper())! as FutureHelper;
    case 'SwapHelper': return accessor(new SwapHelper())! as SwapHelper;
    case 'BondHelper': return accessor(new BondHelper())! as BondHelper;
    default: return null;
  }
}

export function unionListToPoint(
  type: Point, 
  accessor: (index: number, obj:BondHelper|DepositHelper|FRAHelper|FutureHelper|SwapHelper) => BondHelper|DepositHelper|FRAHelper|FutureHelper|SwapHelper|null, 
  index: number
): BondHelper|DepositHelper|FRAHelper|FutureHelper|SwapHelper|null {
  switch(Point[type]) {
    case 'NONE': return null; 
    case 'DepositHelper': return accessor(index, new DepositHelper())! as DepositHelper;
    case 'FRAHelper': return accessor(index, new FRAHelper())! as FRAHelper;
    case 'FutureHelper': return accessor(index, new FutureHelper())! as FutureHelper;
    case 'SwapHelper': return accessor(index, new SwapHelper())! as SwapHelper;
    case 'BondHelper': return accessor(index, new BondHelper())! as BondHelper;
    default: return null;
  }
}

