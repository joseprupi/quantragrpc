// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Fixing } from '../quantra/fixing';
import { BusinessDayConvention } from '../quantra/enums/business-day-convention';
import { Calendar } from '../quantra/enums/calendar';
import { DayCounter } from '../quantra/enums/day-counter';
import { TimeUnit } from '../quantra/enums/time-unit';


export class Index {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):Index {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsIndex(bb:flatbuffers.ByteBuffer, obj?:Index):Index {
  return (obj || new Index()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsIndex(bb:flatbuffers.ByteBuffer, obj?:Index):Index {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Index()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

periodNumber():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

periodTimeUnit():TimeUnit {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : TimeUnit.Days;
}

settlementDays():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

calendar():Calendar {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Calendar.Argentina;
}

businessDayConvention():BusinessDayConvention {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : BusinessDayConvention.Following;
}

endOfMonth():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

dayCounter():DayCounter {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : DayCounter.Actual360;
}

fixings(index: number, obj?:Fixing):Fixing|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? (obj || new Fixing()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

fixingsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startIndex(builder:flatbuffers.Builder) {
  builder.startObject(8);
}

static addPeriodNumber(builder:flatbuffers.Builder, periodNumber:number) {
  builder.addFieldInt32(0, periodNumber, 0);
}

static addPeriodTimeUnit(builder:flatbuffers.Builder, periodTimeUnit:TimeUnit) {
  builder.addFieldInt8(1, periodTimeUnit, TimeUnit.Days);
}

static addSettlementDays(builder:flatbuffers.Builder, settlementDays:number) {
  builder.addFieldInt32(2, settlementDays, 0);
}

static addCalendar(builder:flatbuffers.Builder, calendar:Calendar) {
  builder.addFieldInt8(3, calendar, Calendar.Argentina);
}

static addBusinessDayConvention(builder:flatbuffers.Builder, businessDayConvention:BusinessDayConvention) {
  builder.addFieldInt8(4, businessDayConvention, BusinessDayConvention.Following);
}

static addEndOfMonth(builder:flatbuffers.Builder, endOfMonth:boolean) {
  builder.addFieldInt8(5, +endOfMonth, +false);
}

static addDayCounter(builder:flatbuffers.Builder, dayCounter:DayCounter) {
  builder.addFieldInt8(6, dayCounter, DayCounter.Actual360);
}

static addFixings(builder:flatbuffers.Builder, fixingsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, fixingsOffset, 0);
}

static createFixingsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startFixingsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endIndex(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishIndexBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedIndexBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createIndex(builder:flatbuffers.Builder, periodNumber:number, periodTimeUnit:TimeUnit, settlementDays:number, calendar:Calendar, businessDayConvention:BusinessDayConvention, endOfMonth:boolean, dayCounter:DayCounter, fixingsOffset:flatbuffers.Offset):flatbuffers.Offset {
  Index.startIndex(builder);
  Index.addPeriodNumber(builder, periodNumber);
  Index.addPeriodTimeUnit(builder, periodTimeUnit);
  Index.addSettlementDays(builder, settlementDays);
  Index.addCalendar(builder, calendar);
  Index.addBusinessDayConvention(builder, businessDayConvention);
  Index.addEndOfMonth(builder, endOfMonth);
  Index.addDayCounter(builder, dayCounter);
  Index.addFixings(builder, fixingsOffset);
  return Index.endIndex(builder);
}
}
