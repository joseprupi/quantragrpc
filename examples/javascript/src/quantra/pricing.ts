// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { TermStructure } from '../quantra/term-structure';


export class Pricing {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):Pricing {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPricing(bb:flatbuffers.ByteBuffer, obj?:Pricing):Pricing {
  return (obj || new Pricing()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPricing(bb:flatbuffers.ByteBuffer, obj?:Pricing):Pricing {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Pricing()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

asOfDate():string|null
asOfDate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
asOfDate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

curves(index: number, obj?:TermStructure):TermStructure|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new TermStructure()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

curvesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

bondPricingDetails():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

bondPricingFlows():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startPricing(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addAsOfDate(builder:flatbuffers.Builder, asOfDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, asOfDateOffset, 0);
}

static addCurves(builder:flatbuffers.Builder, curvesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, curvesOffset, 0);
}

static createCurvesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCurvesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addBondPricingDetails(builder:flatbuffers.Builder, bondPricingDetails:boolean) {
  builder.addFieldInt8(2, +bondPricingDetails, +false);
}

static addBondPricingFlows(builder:flatbuffers.Builder, bondPricingFlows:boolean) {
  builder.addFieldInt8(3, +bondPricingFlows, +false);
}

static endPricing(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createPricing(builder:flatbuffers.Builder, asOfDateOffset:flatbuffers.Offset, curvesOffset:flatbuffers.Offset, bondPricingDetails:boolean, bondPricingFlows:boolean):flatbuffers.Offset {
  Pricing.startPricing(builder);
  Pricing.addAsOfDate(builder, asOfDateOffset);
  Pricing.addCurves(builder, curvesOffset);
  Pricing.addBondPricingDetails(builder, bondPricingDetails);
  Pricing.addBondPricingFlows(builder, bondPricingFlows);
  return Pricing.endPricing(builder);
}
}
