// automatically generated by the FlatBuffers compiler, do not modify

import { FlowInterest } from '../quantra/flow-interest';
import { FlowNotional } from '../quantra/flow-notional';
import { FlowPastInterest } from '../quantra/flow-past-interest';


export enum Flow{
  NONE = 0,
  FlowInterest = 1,
  FlowPastInterest = 2,
  FlowNotional = 3
}

export function unionToFlow(
  type: Flow,
  accessor: (obj:FlowInterest|FlowNotional|FlowPastInterest) => FlowInterest|FlowNotional|FlowPastInterest|null
): FlowInterest|FlowNotional|FlowPastInterest|null {
  switch(Flow[type]) {
    case 'NONE': return null; 
    case 'FlowInterest': return accessor(new FlowInterest())! as FlowInterest;
    case 'FlowPastInterest': return accessor(new FlowPastInterest())! as FlowPastInterest;
    case 'FlowNotional': return accessor(new FlowNotional())! as FlowNotional;
    default: return null;
  }
}

export function unionListToFlow(
  type: Flow, 
  accessor: (index: number, obj:FlowInterest|FlowNotional|FlowPastInterest) => FlowInterest|FlowNotional|FlowPastInterest|null, 
  index: number
): FlowInterest|FlowNotional|FlowPastInterest|null {
  switch(Flow[type]) {
    case 'NONE': return null; 
    case 'FlowInterest': return accessor(index, new FlowInterest())! as FlowInterest;
    case 'FlowPastInterest': return accessor(index, new FlowPastInterest())! as FlowPastInterest;
    case 'FlowNotional': return accessor(index, new FlowNotional())! as FlowNotional;
    default: return null;
  }
}

