// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Point, unionToPoint, unionListToPoint } from '../quantra/point';


export class PointsWrapper {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):PointsWrapper {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPointsWrapper(bb:flatbuffers.ByteBuffer, obj?:PointsWrapper):PointsWrapper {
  return (obj || new PointsWrapper()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPointsWrapper(bb:flatbuffers.ByteBuffer, obj?:PointsWrapper):PointsWrapper {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PointsWrapper()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

pointWrapperType():Point {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : Point.NONE;
}

pointWrapper<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startPointsWrapper(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addPointWrapperType(builder:flatbuffers.Builder, pointWrapperType:Point) {
  builder.addFieldInt8(0, pointWrapperType, Point.NONE);
}

static addPointWrapper(builder:flatbuffers.Builder, pointWrapperOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, pointWrapperOffset, 0);
}

static endPointsWrapper(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createPointsWrapper(builder:flatbuffers.Builder, pointWrapperType:Point, pointWrapperOffset:flatbuffers.Offset):flatbuffers.Offset {
  PointsWrapper.startPointsWrapper(builder);
  PointsWrapper.addPointWrapperType(builder, pointWrapperType);
  PointsWrapper.addPointWrapper(builder, pointWrapperOffset);
  return PointsWrapper.endPointsWrapper(builder);
}
}
