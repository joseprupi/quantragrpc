// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { BusinessDayConvention } from '../quantra/enums/business-day-convention';
import { Calendar } from '../quantra/enums/calendar';
import { DayCounter } from '../quantra/enums/day-counter';


export class FutureHelper {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):FutureHelper {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFutureHelper(bb:flatbuffers.ByteBuffer, obj?:FutureHelper):FutureHelper {
  return (obj || new FutureHelper()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFutureHelper(bb:flatbuffers.ByteBuffer, obj?:FutureHelper):FutureHelper {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FutureHelper()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

rate():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

futureStartDate():string|null
futureStartDate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
futureStartDate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

futureMonths():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

calendar():Calendar {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Calendar.Argentina;
}

businessDayConvention():BusinessDayConvention {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : BusinessDayConvention.Following;
}

dayCounter():DayCounter {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : DayCounter.Actual360;
}

static startFutureHelper(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addRate(builder:flatbuffers.Builder, rate:number) {
  builder.addFieldFloat32(0, rate, 0.0);
}

static addFutureStartDate(builder:flatbuffers.Builder, futureStartDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, futureStartDateOffset, 0);
}

static addFutureMonths(builder:flatbuffers.Builder, futureMonths:number) {
  builder.addFieldInt32(2, futureMonths, 0);
}

static addCalendar(builder:flatbuffers.Builder, calendar:Calendar) {
  builder.addFieldInt8(3, calendar, Calendar.Argentina);
}

static addBusinessDayConvention(builder:flatbuffers.Builder, businessDayConvention:BusinessDayConvention) {
  builder.addFieldInt8(4, businessDayConvention, BusinessDayConvention.Following);
}

static addDayCounter(builder:flatbuffers.Builder, dayCounter:DayCounter) {
  builder.addFieldInt8(5, dayCounter, DayCounter.Actual360);
}

static endFutureHelper(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createFutureHelper(builder:flatbuffers.Builder, rate:number, futureStartDateOffset:flatbuffers.Offset, futureMonths:number, calendar:Calendar, businessDayConvention:BusinessDayConvention, dayCounter:DayCounter):flatbuffers.Offset {
  FutureHelper.startFutureHelper(builder);
  FutureHelper.addRate(builder, rate);
  FutureHelper.addFutureStartDate(builder, futureStartDateOffset);
  FutureHelper.addFutureMonths(builder, futureMonths);
  FutureHelper.addCalendar(builder, calendar);
  FutureHelper.addBusinessDayConvention(builder, businessDayConvention);
  FutureHelper.addDayCounter(builder, dayCounter);
  return FutureHelper.endFutureHelper(builder);
}
}
